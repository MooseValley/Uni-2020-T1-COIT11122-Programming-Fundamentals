******************************************************
COIT11122 Programming Fundamentals (2020-T1)
Week: 07
Course Web Page:             https://moodle.cqu.edu.au/course/view.php?id=16776
Course Coordinator:          Bruce Mckenzie, email: b.mckenzie@cqu.edu.au, Ph. 03 9616 0609, Melbourne.
Rocky Teacher (Part-Time):   Mike O'Malley, m.omalley@cqu.edu.au
Mike O'Malley's GitHub:      https://github.com/MooseValley/Uni-2020-T1-COIT11122-Programming-Fundamentals
Mike O'Malley's Java Videos: http://tinyurl.com/MikesJavaVideos
******************************************************

Week 01 Creating Java Programs
Week 02 Using Data
Week 03 Making Decisions
Week 04 Looping
Week 05 Using Methods, Classes and Objects
Week 06 More Object Concepts
Week 07 Arrays				<--- YOU ARE HERE !
Week 08 Advanced Array Concepts
Week 09 Introduction to Swing Components
Week 10 Characters, Strings, and the StringBuilder
Week 11 File Input and Output
Week 12 Revision


LAST WEEK:
* Week 6: More Object Concepts
* COIT11222_Week6.ppt
* New topics: Overloading, this, shadowing, Composition, has-a, Nested classes,
* Re-cover these topics: Blocks / Scope, Static, Math class, Imports, LocalDate, ...

THIS WEEK:
* Week 7: Arrays
* COIT11222_Week7.ppt
* Arrays, Parrallel Arrays, Arrays of Objects, etc.
* Methods: Pass by Value (primitive types), Pass by Reference, dangers, issues,


What is an Array ?

Named group of something / some kind of data
Used an index to acces each element in the array
Index start at 0.

int insArray[];
int[] insArray; // Java way   // Declaring the array
insArray = new int [100];     // Creating the array.


// 100 integers, index are 0 to 99.
int[] insArray = new int [100]; // Declaring and Creating the array.


insArray[0] = 10; // First element in the array = 10
:::
insArray[99] = 456;

insArray[100] = 22; // ERROR: index out of bounds.
insArray[-1]  = 22; // ERROR: index out of bounds.


*** GOLDEN RULE:
Array of size N
has N storage locations
indexed from 0 to (N-1)


int[] insArray; // Java way   // Declaring the array
S.o.p (insArray);
insArray = new int [100];     // Creating the array.
S.o.p (insArray);

numbers: int, double, ..... 0
int val;
S.o.p (val); // 0

int[] insArray = new int [100]; // Declaring and Creating the array.
S.o.p (insArray[0]); // 0
S.o.p (insArray[1]); // 0
S.o.p (insArray[2]); // 0

char c;

Date, String, Employee, Array, array of objects
-> null

String name;
S.o.p (name); // null

Employee e1;
S.o.p (e1); // null

int[] insArray;
S.o.p (insArray); // null



// Hard-coded Arrays / non-default array

int[] maximums = {100, 200, 300}; // Array of size 3: indexes 0, 1, 2

String[] names = {"Mike", "Frankie", "Bella"}; // Array of size 3: indexes 0, 1, 2

S.o.p (names[1] ); // Frankie



int[] insArray = new int [100]; // Declaring and Creating the array.

insArray[0] = kb.nextInt();
insArray[1] = kb.nextInt();
insArray[2] = kb.nextInt();
::::

for (int k = 0; k < insArray.length; k++)
{
   S.o.p ("Enter integer " + (k + 1) + ": ");
   insArray [k]= kb.nextInt(); // 0 to 99
}


// BAD Code - 100 is duplicated
for (int k = 0; k < 100; k++)
{
   S.o.p (insArray [k] ); // 0 to 99
}

// GOOD Code: use the length property of the array
for (int k = 0; k < insArray.length; k++)
{
   S.o.p (insArray [k] ); // 0 to 99
}

String name = "Mike";
S.o.p (name.length() ); // 4


total = total + 3;
total += 3;



final int MAX_SIZE = 100;

int[] insArray = new int [MAX_SIZE];


// GOOD Code: use the length property of the array
for (int k = 0; k < insArray.length; k++)
{
   S.o.p (insArray [k] ); // 0 to 99
}

// GOOD Code: use the MAX_SIZE constant
for (int k = 0; k < MAX_SIZE; k++)
{
   S.o.p (insArray [k] ); // 0 to 99
}



*** COMMON ERRORS:  <= instead of <

for (int k = 0; k <= insArray.length; k++) // ERROR
{
   S.o.p (insArray [k] ); // 0 to 99
}

for (int k = 0; k <= MAX_SIZE; k++)        // ERROR
{
   S.o.p (insArray [k] ); // 0 to 99
}



*** Enhanced For Loop / Compact For Loop

// GOOD Code: use the length property of the array
for (int k = 0; k < insArray.length; k++)
{
   S.o.p (insArray [k] ); // 0 to 99
}

// GOOD Code: use the MAX_SIZE constant
for (int k = 0; k < MAX_SIZE; k++)
{
   S.o.p (insArray [k] ); // 0 to 99
}


for (int val : insArray)
{
   S.o.p (val);
}



String[] names = {"Mike", "Frankie", "Bella"}; // Array of size 3: indexes 0, 1, 2

for (int k = 0; k < names.length; k++)
{
   S.o.p (names [k] );
}

for (String str : names)
{
   S.o.p (str);
}



// What if you need to access the element number / location ?

for (int k = 0; k < names.length; k++)
{
   S.o.p ("Name " + (k + 1) + ": " + names [k] );
}

int count = 0;
for (String str : names)
{
   count++
   S.o.p ("Name " + count + ": " + str);
}


*** Arrays of Objects

Employee e1;
S.o.p (e1); // null
e1 = new Employee ("Mike", 123);

// Or using Scanner input from user:
e1 = new Employee (kb.nextLine(), kb.nextInt() );

S.o.p (e1.getName() + " (" + e1.getId() );





final int MAX_SIZE = 100;

Employee[] emps = new Employee [MAX_SIZE];

S.o.p (emp[0] ); // null

emps[0] = new Employee ("Mike",    123);
emps[1] = new Employee ("Frankie", 456);

// Or using Scanner input from user:
emps[0] = new Employee (kb.nextLine(), kb.nextInt() );

for (int k = 0; k < MAX_SIZE; k++)
{
   S.o.p ("Enter Employee " + (k + 1) + ": ");
   emps[k] = new Employee (kb.next(), kb.nextInt() );
}



for (int k = 0; k < MAX_SIZE; k++)
{
   S.o.p ("Employee " + (k + 1) + ": " + emps[k].getName() + " (" + emps[k].getId()  + ")" );
}


Student TODO:
* Adapt strategy on slide 14 to eliminate duplicate code: see Week 4/5.
* Move constant MAX to top and use this to declare the array.
* Adapt strategy to above code to enable user to enter just 5 or 10 or whatever employees.


for (int k = 0; k < count; k++)
{
   S.o.p ("Employee " + (k + 1) + ": " + emps[k].getName() + " (" + emps[k].getId()  + ")" );
}

for (Employee e : emps)
{
   S.o.p (e.getName() + " (" + e.getId()  + ")" );
}



Slide 17:

for (String str : deptNames)
{
   S.o.p (str);
}



101
102
103
110

int[] validValues = {101, 102, 103, 110};

boolean validItem = false; /// Assume false and try and prove otherwise


int itemOrdered = kb.nextInt(); // Scanner

int index = -1;
for (int k = 0; k < validValues.length; k++)
{
   if (itemOrdered == validValues [k])
   {
      validItem = true;
      index     = k;
      k = validValues.length;  // Exit loop !
   }
}

if (validItem != true)
   // Display error, etc


int index = 0;
while (validItem == false)
{
   if (itemOrdered == validValues [index])
   {
      validItem = true;
   }
   else
   {
      index++;
   }
}
:::



*** Parallel Arrays

Multiple arrays containing related data.
Everything must be kept in-line
If you sort one array - the other arrays must have the same swap operations performed


ProducCodes   101        102     103            110
Product       Keyboard   Mouse   16 GB memory   32 GB memory


                       // 0           1        2               3
int[]    productCodes  = {101,        102,     103,            110};
String[] productNames  = {"Keyboard", "Mouse", "16 GB memory", "32 GB memory"};
double[] producePrices = {19.99,      14.99,   22.50,          31.45};
int[]    stockQuantity = {5,          4,       1,              3};

productCode   [2] // 103
productNames  [2] // 16 GB memory
producePrices [2] // 22.50


// MUCH BETTER SOLUTION - use OOP !!

class Product
{
  private int    code;
  private String name;
  private double price;
  private int    quantityInStock;

  // Constructors
  // Mutators
  // Accessors
  // toString
}

final int MAX_SIZE = 10;

Product[] products = new Product [MAX_SIZE};


Product temp = products[0];
products[0]  = products[4];
products[4]  = temp;


// Range searches:

0 - 5   0%
6 - 10  5%
10 - 20 15%





*** Methods - Pass by Value and Pass by Reference

All primitive types are passed by value to a method
if the method changes the value this has NO EFFECT on the value inside the caller
Applies to all primitive types:
* int, double, boolean, char, long, float, etc ...

References types - String, Employee, Date, arrays, etc
the memory address is passed to the the method
And the method can change data pointed to at that memory address.
BE CAREFUL !!!


Solutions:
* Copy of the object and pass the copy.
* Restrict it so the object is a Constant
* etc
==> Outside the scope for us.



Slide 27

Student TODO:
* Adapt this code to pass the array and chaneg the array
and see if it changed back in the calling method (main).



public String ::::::
{
  return "Hello";
}

public Date :::::::
{
   Date date = new Date();
   ::::
   return date;
}

public Employee getEmployee ()
{
   Employee e1 = new Employee (:::::):
   ::::
   // Get user input for each:
   // Validations ...
   empsArray[k].setId   ( kb.nextInt() );
   empsArray[k].setName ( kb.next() );

   return e1;
}

public int[] :::::::
{
   int[] nums = {5, 10, 22, 33, 44};

   ::::
   return nums;
}


public boolean getUserInput (Employee[] empsArray)
{
   // get user input for each employee ...
   boolean allValid = true;

   for (:::::::)
   {
	   empsArray[k] = getEmployee ();
   }

   return allValid;
}

Employee[] emps = new Employee [100];

boolean isValid = getUserInput (emps);



public Employee[] getArrayOfEmployee (:::::)
{
    Employee[] emps = new Employee [100];
    ::::

    return emps;
}


EOF.
